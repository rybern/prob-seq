Needed functions:
	intersperse x [a, b, c, ...] = [a, x, b, x, c, x, ...]
	Insertion error: intersperse . geometric . uniform

Branch tagging. Version of each function (?) that tags the state labels with branching information.
Then, once the state sequence is recovered, we retain information about the constructors that generated the observation. This can be used for:
	visualizations
	filtering out classes of generators, such as sequencing error/mutation states.

Idea: encode stegonographic messages into a probabilistic sequence.
	The message would somehow determine the sampling path through the AST.

Idea: try to encode each of Haskell's Data.List functions as a probabilistic sequence. Reuse possible under any cercumstances?

BIO fork:
	read: repeat masker, track in genome browser
	useful examples, templets, builders
	figure out use cases
	Layers for reading errors of particular sequencers,
		mutation types/rates for particular environments


Need to fix ProbSeq generation - too much variance.
Could probably randomly generate normalized matrices, instead of actually building the whole trees.
